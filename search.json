[{"path":[]},{"path":"https://nehgov.github.io/ripeds/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"CC0 1.0 Universal","title":"CC0 1.0 Universal","text":"CREATIVE COMMONS CORPORATION LAW FIRM PROVIDE LEGAL SERVICES. DISTRIBUTION DOCUMENT CREATE ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES INFORMATION “-” BASIS. CREATIVE COMMONS MAKES WARRANTIES REGARDING USE DOCUMENT INFORMATION WORKS PROVIDED HEREUNDER, DISCLAIMS LIABILITY DAMAGES RESULTING USE DOCUMENT INFORMATION WORKS PROVIDED HEREUNDER.","code":""},{"path":"https://nehgov.github.io/ripeds/LICENSE.html","id":"statement-of-purpose","dir":"","previous_headings":"","what":"Statement of Purpose","title":"CC0 1.0 Universal","text":"laws jurisdictions throughout world automatically confer exclusive Copyright Related Rights (defined ) upon creator subsequent owner(s) (, “owner”) original work authorship /database (, “Work”). Certain owners wish permanently relinquish rights Work purpose contributing commons creative, cultural scientific works (“Commons”) public can reliably without fear later claims infringement build upon, modify, incorporate works, reuse redistribute freely possible form whatsoever purposes, including without limitation commercial purposes. owners may contribute Commons promote ideal free culture production creative, cultural scientific works, gain reputation greater distribution Work part use efforts others. /purposes motivations, without expectation additional consideration compensation, person associating CC0 Work (“Affirmer”), extent owner Copyright Related Rights Work, voluntarily elects apply CC0 Work publicly distribute Work terms, knowledge Copyright Related Rights Work meaning intended legal effect CC0 rights. Copyright Related Rights. Work made available CC0 may protected copyright related neighboring rights (“Copyright Related Rights”). Copyright Related Rights include, limited , following: right reproduce, adapt, distribute, perform, display, communicate, translate Work; moral rights retained original author(s) /performer(s); publicity privacy rights pertaining person’s image likeness depicted Work; rights protecting unfair competition regards Work, subject limitations paragraph 4(), ; rights protecting extraction, dissemination, use reuse data Work; database rights (arising Directive 96/9/EC European Parliament Council 11 March 1996 legal protection databases, national implementation thereof, including amended successor version directive); similar, equivalent corresponding rights throughout world based applicable law treaty, national implementations thereof. Waiver. greatest extent permitted , contravention , applicable law, Affirmer hereby overtly, fully, permanently, irrevocably unconditionally waives, abandons, surrenders Affirmer’s Copyright Related Rights associated claims causes action, whether now known unknown (including existing well future claims causes action), Work () territories worldwide, (ii) maximum duration provided applicable law treaty (including future time extensions), (iii) current future medium number copies, (iv) purpose whatsoever, including without limitation commercial, advertising promotional purposes (“Waiver”). Affirmer makes Waiver benefit member public large detriment Affirmer’s heirs successors, fully intending Waiver shall subject revocation, rescission, cancellation, termination, legal equitable action disrupt quiet enjoyment Work public contemplated Affirmer’s express Statement Purpose. Public License Fallback. part Waiver reason judged legally invalid ineffective applicable law, Waiver shall preserved maximum extent permitted taking account Affirmer’s express Statement Purpose. addition, extent Waiver judged Affirmer hereby grants affected person royalty-free, non transferable, non sublicensable, non exclusive, irrevocable unconditional license exercise Affirmer’s Copyright Related Rights Work () territories worldwide, (ii) maximum duration provided applicable law treaty (including future time extensions), (iii) current future medium number copies, (iv) purpose whatsoever, including without limitation commercial, advertising promotional purposes (“License”). License shall deemed effective date CC0 applied Affirmer Work. part License reason judged legally invalid ineffective applicable law, partial invalidity ineffectiveness shall invalidate remainder License, case Affirmer hereby affirms () exercise remaining Copyright Related Rights Work (ii) assert associated claims causes action respect Work, either case contrary Affirmer’s express Statement Purpose. Limitations Disclaimers. trademark patent rights held Affirmer waived, abandoned, surrendered, licensed otherwise affected document. Affirmer offers Work -makes representations warranties kind concerning Work, express, implied, statutory otherwise, including without limitation warranties title, merchantability, fitness particular purpose, non infringement, absence latent defects, accuracy, present absence errors, whether discoverable, greatest extent permissible applicable law. Affirmer disclaims responsibility clearing rights persons may apply Work use thereof, including without limitation person’s Copyright Related Rights Work. , Affirmer disclaims responsibility obtaining necessary consents, permissions rights required use Work. Affirmer understands acknowledges Creative Commons party document duty obligation respect CC0 use Work.","code":""},{"path":"https://nehgov.github.io/ripeds/articles/batch_download.html","id":"ipeds_download_to_disk","dir":"Articles","previous_headings":"","what":"ipeds_download_to_disk()","title":"Batch download","text":"download either complete data files accompanying dictionary files, use ipeds_download_to_disk() function. two basic ways download files: Using file names directly Using results helper function ipeds_file_table()","code":""},{"path":"https://nehgov.github.io/ripeds/articles/batch_download.html","id":"using-file-names","dir":"Articles","previous_headings":"ipeds_download_to_disk()","what":"Using file names","title":"Batch download","text":"know file names need, can use directly. sure give local directory download. directory doesn’t exist, R try create , unless set create_dir = FALSE. Note need specify file ending, file stub name. Whichever files choose, end zip file (<file_stub_name.zip>: IC2022.zip) contains: CSV file (typically lowercase): ic2022.csv revised version file, one exists, ending *_rv: ic2022_rv.csv can pass object vector names. zipped version files downloaded to_dir.","code":"## single file to current working directory ipeds_download_to_disk(to_dir = \".\", files = \"IC2022\") ## multiple files stored in object files_to_get <- c(\"IC2020\", \"IC2021\", \"IC2022\") ipeds_download_to_disk(to_dir = \".\", files = files_to_get)"},{"path":"https://nehgov.github.io/ripeds/articles/batch_download.html","id":"using-results-from-helper-function-ipeds_file_table","dir":"Articles","previous_headings":"ipeds_download_to_disk()","what":"Using results from helper function ipeds_file_table()","title":"Batch download","text":"don’t know specific file names simply want download larger number files without listing , can use results ipeds_file_table(). example, want download files associated 2020, can filter results ipeds_file_table() year: Note files academic year naming conventions (e.g., 9899), fall semester year associated file: 2020 select 20-21 files. can also filter values. Broadly, IPEDS survey components fall categories. can filter return Institutional Characteristics survey files: can filter key words survey titles. example, want save files related directory information: Finally, can download entirety IPEDS use ipeds_file_table() filter: Note, however, IPEDS large. take download take substantial disk space (> 1GB January 2025).","code":"## save results from ipeds_file_table() to object dict <- ipeds_file_table() ## pull all files from 2020 ipeds_download_to_disk(\".\", use_ipeds_dict = dict[dict$year == 2020,]) ## download all surveys under the Institutional Characteristics category ipeds_download_to_disk(\".\", use_ipeds_dict = dict[dict$survey == \"Institutional Characteristics\",]) ## download using regular expressions to grab files with \"Directory\" in title ipeds_download_to_disk(\".\", use_ipeds_dict = dict[grepl(\"Directory\", dict$title),]) ## download all files ipeds_download_to_disk(\".\", use_ipeds_dict = dict)"},{"path":"https://nehgov.github.io/ripeds/articles/batch_download.html","id":"dictionary-files","dir":"Articles","previous_headings":"","what":"Dictionary files","title":"Batch download","text":"Download accompanying dictionary files setting type = \"dictionary\": files named using stub name plus *_Dict ending also stored inside zip directory: e.g., IC2020_Dict.zip.","code":"## get dictionary file ipeds_download_to_disk(\".\", \"IC2020\", type = \"dictionary\")"},{"path":"https://nehgov.github.io/ripeds/articles/batch_download.html","id":"overwrite","dir":"Articles","previous_headings":"","what":"Overwrite","title":"Batch download","text":"default, ipeds_download_to_disk() won’t overwrite existing files. save time bandwidth. wish download input files, set overwrite = TRUE:","code":"## overwrite files_to_get <- c(\"IC2020\", \"IC2021\", \"IC2022\") ipeds_download_to_disk(to_dir = \".\", files = files_to_get, overwrite = TRUE)"},{"path":"https://nehgov.github.io/ripeds/articles/design.html","id":"ipeds-structure","dir":"Articles","previous_headings":"","what":"IPEDS structure","title":"Package design and process","text":"IPEDS true API accessing data files. users want complete data files, two primary download options: Microsoft Access data bases Complete data files version benefits drawbacks. Whereas Access databases helpfully provide data tables given year, files large. also come proprietary database format may require installation additional software users. Finally, IPEDS Access databases go back 2004-2005 data collection period. hand, complete data files smaller — zipped CSV versions individual database tables. also include available data, cases goes back 1980. However, can difficult know files contain variables interest without downloading multiple dictionary files. correct files identified, potentially many files download. ripeds simulates API smartly downloading, reading, wrangling complete data files. users already complete data files need computer, ripeds can skip downloading instead use files, saving bandwidth time necessary download. Using complete data files rather Access databases allows complete coverage IPEDS data doesn’t require users install extra external database tools. aid users already familiar structure IPEDS, ripeds also provides searchable data dictionary can used find request variables interest.","code":""},{"path":"https://nehgov.github.io/ripeds/articles/design.html","id":"design-principles","dir":"Articles","previous_headings":"","what":"Design principles","title":"Package design and process","text":"ripeds built following design principles, general order importance: Support users don’t already know IPEDS structure Allow user maximum flexibility terms variables selected, filters, output returned Try give user request , possible, give informative error memory bandwidth efficient possible instances, design principles odds . Allowing users flexibility choosing filters means might instances many files need downloaded (breaking principle 4) request return unjoined files list also correctly apply filter (breaking principle 3). Based complexity IPEDS, unfortunately way around incommensurable requests. Users understand design choices, however, can find ways mitigate unintended output ultimately gather data need format required analysis.","code":""},{"path":"https://nehgov.github.io/ripeds/articles/design.html","id":"how-it-works","dir":"Articles","previous_headings":"","what":"How it works","title":"Package design and process","text":"general process returning data call follows: Scrape IPEDS complete data file site generate table currently available files already memory. Using table alongside internal data dictionary, generate list complete data files contain selected variables alongside chosen years Read complete data files memory — downloading necessary — selecting variables requested Return output: list individual file used, list files like files across years binded, single joined data frame example, take following call: call generate following work flow: Check memory table available files; available, scrape IPEDS site (needs per session) found HD2023 data file HD2023.zip either found downloaded tempdir() Read hd2023.csv (revised version, hd2023_rv.csv, exists default), selecting instnm stabbr well unitid Return data frame","code":"ipeds_init() |>   ipeds_select(instnm, stabbr) |>   ipeds_year(2023) |>   ipeds_get()"},{"path":"https://nehgov.github.io/ripeds/articles/design.html","id":"using-a-filter","dir":"Articles","previous_headings":"How it works","what":"Using a filter","title":"Package design and process","text":"filter, process becomes little complex. filtering variables might located different data files, data files must first read memory combined necessary filter can applied. added wrinkle, complete data files wide format, table row representing unique institution (variable UNITID), complete data files long format, institution can multiple rows table. detailed information filters work ripeds, see vignette filtering behavior.","code":""},{"path":"https://nehgov.github.io/ripeds/articles/design.html","id":"return","dir":"Articles","previous_headings":"","what":"Return","title":"Package design and process","text":"default, ripeds attempt combine files single data.frame. two step process: Row bind like files, meaning data.frame coming complete files contain variables, different years (e.g., HD2020, HD2021, HD2022, etc) Join different file types UNITID year using full outer join artificially subset resulting data.frame based order joins — may result missing values data.frame cells depending specific nature call user can also choose return files row bound like files, joined across files entirely individually. options result return list. example, user sets join = FALSE bind = TRUE data call requires complete data files HD2020, HD2021, IC2020, IC2021, list two items returned: data.frame results two HD* files bound together data.frame results two IC* files bound together. user chooses bind like files, result single bound data.frame, output list one item. example, returns list one item: data.frame two observations per unique UNITID containing UNITID, institution name, state abbreviation, year, file name. Choosing bind (default also sets join = FALSE), returns list two items: separate data.frames containing UNITID, institution name, state abbreviation, file name, year year. Returning original call, choosing either join = FALSE bind = FALSE, return single data.frame list. Even though data (addition file name data.frame) returned first call — since requested data come single complete data file — ripeds returns list instead data.frame object sake consistency.","code":"ipeds_init() |>   ipeds_select(instnm, stabbr) |>   ipeds_year(2022:2023) |>   ipeds_get(join = FALSE) ipeds_init() |>   ipeds_select(instnm, stabbr) |>   ipeds_year(2022:2023) |>   ipeds_get(bind = FALSE) ipeds_init() |>   ipeds_select(instnm, stabbr) |>   ipeds_year(2023) |>   ipeds_get(bind = FALSE)"},{"path":"https://nehgov.github.io/ripeds/articles/design.html","id":"speed-and-memory","dir":"Articles","previous_headings":"","what":"Speed and memory","title":"Package design and process","text":"first data request requires table current complete data files tempdir(). ipeds_init() find table, one created scraping IPEDS website, munging results, storing table tempdir(). step take long completed, need taken rest session. Subsequent data pulls size little faster repeat step. making data call, ripeds first check whether required complete data files located tempdir() (assuming user files machine supply ipeds_init() local_dir). missing files downloaded tempdir(). rest session, files available subsequent data requests. especially useful interactive sessions user makes multiple similar calls: data memory need downloaded . make additional calls faster necessary files memory. Individual complete data files small: tables zipped file downloaded. computers situations, users find taking much memory via temporary file storage tempdir(). older computers situations memory must kept open, however, users may wish clear tempdir() within session. user wants keep downloaded files, ipeds_tmp_to_disk() save IPEDS files memory chosen directory. user care save files, can just close session reopen clean one. Alternatively, may want use something like: WARNING code remove *.zip files tempdir(). user saved zipped files tempdir() session, deleted well.","code":"file.remove(list.files(tempdir(), full.names = TRUE, pattern = \".zip\"))"},{"path":"https://nehgov.github.io/ripeds/articles/filter_behavior.html","id":"how-ripeds-uses-filters","dir":"Articles","previous_headings":"","what":"How ripeds uses filters","title":"Filter behavior","text":"using ipeds_filter() call chain, ripeds makes distinction filters use variables wide data files versus come long (narrow) data files. Wide wide data, row represents unique institution. Long long (narrow) data, unique institutions — represented unitid — may observation (row) data set. case, institutions one observation across five categories efdelev. general, ripeds apply filters follows: wide: filter(s) applied preprocessing step primary data selection long: filter(s) applied postprocessing step primary data selection","code":""},{"path":"https://nehgov.github.io/ripeds/articles/filter_behavior.html","id":"preprocessing-filter","dir":"Articles","previous_headings":"How ripeds uses filters","what":"Preprocessing filter","title":"Filter behavior","text":"Preprocessing filters require single data.frame containing filtering variables built prior main data request. constructed, filters applied single data.frame consisting two columns, UNITID year, returned. data.frame used primary data selection stage keep institution/year pairs returned filter.","code":""},{"path":"https://nehgov.github.io/ripeds/articles/filter_behavior.html","id":"postprocessing-filter","dir":"Articles","previous_headings":"How ripeds uses filters","what":"Postprocessing filter","title":"Filter behavior","text":"long files unique UNITID year (see example ), filtering data.frame produced preprocessing filter adequately handle filter like efdelev == 3. postprocessing filter applied case variables sourced long data files. preprocessing filter primary data call, filter containing variable long data file applied output requested user. result depend complexity filter(s) type output chosen user: [join = TRUE (default)] Filter(s) applied single joined data.frame, always successful assuming properly formatted filter [join = FALSE, bind = TRUE|FALSE] Filter(s) applied applicable individual data.frames contained output list. means filter contains variable found particular long data file, attempt apply filter data file. may successful. postprocessing filter fail complex filter containing variables across multiple data files requested alongside join = FALSE. Since complex filter applied one data file data file type (e.g., HD*), filter able find variables. situation, error message alerting user occur unfiltered data.frame returned. error message returned, user either set join = TRUE (default), use less complex filter, filter results separate process.","code":""},{"path":"https://nehgov.github.io/ripeds/articles/filter_behavior.html","id":"considerations","dir":"Articles","previous_headings":"","what":"Considerations","title":"Filter behavior","text":"applying filters using ipeds_filter(), user keep mind trade-complex filters large data requests, memory / time required fulfill request, potential errors. filter set filters becomes complex, data.frame needed preprocessing step grow size. long data files used, time /memory needed postprocessing steps. cases user chooses join final output, increased chance error unexpected behavior. issues scale variables data years requested. situations requiring complex filtering behavior alongside large data requests, user may benefit breaking request smaller chunks fewer filters wrangling results using R tools (Tidyverse). cases, user confirm output matches expectations.","code":""},{"path":"https://nehgov.github.io/ripeds/articles/introduction.html","id":"data-on-us-higher-education-institutions","dir":"Articles","previous_headings":"","what":"Data on US higher education institutions","title":"Introduction","text":"interested data higher education institutions United States, Integrated Postsecondary Education Data System (IPEDS) invaluable resource. IPEDS? National Center Education Statistics (NCES) web site: [IPEDS] system interrelated surveys conducted annually U.S. Department Education’s National Center Education Statistics (NCES). IPEDS gathers information every college, university, technical vocational institution participates federal student financial aid programs. Higher Education Act 1965, amended, requires institutions participate federal student aid programs report data enrollments, program completions, graduation rates, faculty staff, finances, institutional prices, student financial aid. IPEDS covers (though ) higher education institutions: completion IPEDS surveys mandatory institutions participate applicants participation federal student financial aid program (Pell grants federal student loans) authorized Title IV Higher Education Act 1965, amended (20 USC 1094, Section 487()(17) 34 CFR 668.14(b)(19)). Institutions complete IPEDS surveys year include research universities, state colleges universities, private religious liberal arts colleges, -profit institutions, community technical colleges, non-degree-granting institutions beauty colleges, others.","code":""},{"path":"https://nehgov.github.io/ripeds/articles/introduction.html","id":"using-ipeds","dir":"Articles","previous_headings":"","what":"Using IPEDS","title":"Introduction","text":"number ways use IPEDS data. information single institutions, one can use College Navigator. NCES also provides [Data Explorer}(https://nces.ed.gov/ipeds/search) number pre-compiled tables may find sufficient. researchers interested performing analyses across many institutions, however, complete data files useful. complete data files shared via Microsoft Access databases separate CSV files. Whereas Access databases go back 2004-2005 school year, CSV versions data files contain information far back 1980.","code":""},{"path":"https://nehgov.github.io/ripeds/articles/introduction.html","id":"ipeds-is-complex-and-does-not-have-an-api","dir":"Articles","previous_headings":"","what":"IPEDS is complex and does not have an API","title":"Introduction","text":"IPEDS database complex. Downloading separate CSV files requires users understand find variables interest append / join files single data frame can analyzed. Unlike federal data sources higher education (like College Scorecard), IPEDS API allows users directly pull data analyses applications.","code":""},{"path":"https://nehgov.github.io/ripeds/articles/introduction.html","id":"purpose-of-ripeds","dir":"Articles","previous_headings":"","what":"Purpose of ripeds","title":"Introduction","text":"purpose package threefold: provide API-like interface IPEDS R facilitate finding pulling relevant variables without requiring detailed knowledge IPEDS’s structure via interactive dictionary function make easy batch download large parts IPEDS (including full dictionary files) users need save original files machine like easier automated way ","code":""},{"path":"https://nehgov.github.io/ripeds/articles/introduction.html","id":"other-r-package-options","dir":"Articles","previous_headings":"","what":"Other R package options","title":"Introduction","text":"Besides ripeds, tools access IPEDS data via R users may find helpful: ipeds, uses Microsoft Access files. educationdata, accesses Urban Institute’s Education Data Portal internal API. Data sources IPEDS may accessed via Urban Institute’s API.","code":""},{"path":"https://nehgov.github.io/ripeds/articles/nse.html","id":"selecting-variables","dir":"Articles","previous_headings":"","what":"Selecting variables","title":"Non-standard evaluation","text":"NSE, variables can separated commas without quotation. NSE Using standard evaluation, quotation concatenation c() required. Standard Note standard evaluation, users can store variables names object pass object ipeds_select(). can useful large variable requests dynamic requests.","code":"df <- ipeds_init() |>   ipeds_select(instnm, stabbr) |>   ipeds_year(2023) |>   ipeds_get() df |> head() #>   unitid                              instnm stabbr year #> 1 100654            Alabama A & M University     AL 2023 #> 2 100663 University of Alabama at Birmingham     AL 2023 #> 3 100690                  Amridge University     AL 2023 #> 4 100706 University of Alabama in Huntsville     AL 2023 #> 5 100724            Alabama State University     AL 2023 #> 6 100733 University of Alabama System Office     AL 2023 df <- ipeds_init(use_nse = FALSE) |>   ipeds_select(c(\"instnm\", \"stabbr\")) |>   ipeds_year(2023) |>   ipeds_get() df |> head() #>   unitid                              instnm stabbr year #> 1 100654            Alabama A & M University     AL 2023 #> 2 100663 University of Alabama at Birmingham     AL 2023 #> 3 100690                  Amridge University     AL 2023 #> 4 100706 University of Alabama in Huntsville     AL 2023 #> 5 100724            Alabama State University     AL 2023 #> 6 100733 University of Alabama System Office     AL 2023 ## using object vars_to_get <- c(\"instnm\", \"stabbr\") df <- ipeds_init(use_nse = FALSE) |>   ipeds_select(vars_to_get) |>   ipeds_year(2023) |>   ipeds_get()  df |> head() #>   unitid                              instnm stabbr year #> 1 100654            Alabama A & M University     AL 2023 #> 2 100663 University of Alabama at Birmingham     AL 2023 #> 3 100690                  Amridge University     AL 2023 #> 4 100706 University of Alabama in Huntsville     AL 2023 #> 5 100724            Alabama State University     AL 2023 #> 6 100733 University of Alabama System Office     AL 2023 ## dynamically df_list <- purrr::map(c(\"instnm\", \"stabbr\", \"control\"),                       ~ ipeds_init(use_nse = FALSE) |>                         ipeds_select(.x) |>                         ipeds_year(2023) |>                         ipeds_get()) lapply(df_list, head) #> [[1]] #>   unitid                              instnm year #> 1 100654            Alabama A & M University 2023 #> 2 100663 University of Alabama at Birmingham 2023 #> 3 100690                  Amridge University 2023 #> 4 100706 University of Alabama in Huntsville 2023 #> 5 100724            Alabama State University 2023 #> 6 100733 University of Alabama System Office 2023 #>  #> [[2]] #>   unitid stabbr year #> 1 100654     AL 2023 #> 2 100663     AL 2023 #> 3 100690     AL 2023 #> 4 100706     AL 2023 #> 5 100724     AL 2023 #> 6 100733     AL 2023 #>  #> [[3]] #>   unitid control year #> 1 100654       1 2023 #> 2 100663       1 2023 #> 3 100690       2 2023 #> 4 100706       1 2023 #> 5 100724       1 2023 #> 6 100733       1 2023"},{"path":"https://nehgov.github.io/ripeds/articles/nse.html","id":"filters","dir":"Articles","previous_headings":"","what":"Filters","title":"Non-standard evaluation","text":"Filters can also applied using either NSE standard evaluation. NSE, multiple filters separated commas, treated (&). NSE want complex filter, likely need use standard evaluation. Standard Note ipeds_init(use_nse = FALSE) use standard evaluation throughout call chain. information filters work, see vignette filter behavior.","code":"df <- ipeds_init() |>   ipeds_select(instnm, stabbr) |>   ipeds_year(2023) |>   ipeds_filter(stabbr == \"KY\", control == 1) |> # stabbr == \"KY\" & control == 1   ipeds_get() df |> head() #>   unitid year                                                instnm control #> 1 156231 2023               Ashland Community and Technical College       1 #> 2 156338 2023 Southcentral Kentucky Community and Technical College       1 #> 3 156392 2023             Bluegrass Community and Technical College       1 #> 4 156620 2023                           Eastern Kentucky University       1 #> 5 156648 2023         Elizabethtown Community and Technical College       1 #> 6 156790 2023                Hazard Community and Technical College       1 #>   stabbr #> 1     KY #> 2     KY #> 3     KY #> 4     KY #> 5     KY #> 6     KY df |> dplyr::distinct(stabbr, control) #>   stabbr control #> 1     KY       1 df <- ipeds_init(use_nse = FALSE) |>   ipeds_select(c(\"instnm\", \"stabbr\")) |>   ipeds_year(2023) |>   ipeds_filter(\"stabbr == 'KY' & (control == 1 | control == 2)\") |>    ipeds_get() df |> head() #>   unitid year                                  instnm control stabbr #> 1 156189 2023                     Alice Lloyd College       2     KY #> 2 156213 2023                       Asbury University       2     KY #> 3 156222 2023             Asbury Theological Seminary       2     KY #> 4 156231 2023 Ashland Community and Technical College       1     KY #> 5 156286 2023                   Bellarmine University       2     KY #> 6 156295 2023                           Berea College       2     KY df |> dplyr::distinct(stabbr, control) #>   stabbr control #> 1     KY       2 #> 2     KY       1"},{"path":[]},{"path":"https://nehgov.github.io/ripeds/articles/workflow.html","id":"example-1-institution-locations","dir":"Articles","previous_headings":"","what":"Example 1: institution locations","title":"Workflow","text":"first request, ’ll search institution coordinates. Since don’t know exact variable names, can use ipeds_dict(). default, ipeds_dict() search variable names, descriptions, filenames. ’ll start latitude:","code":""},{"path":"https://nehgov.github.io/ripeds/articles/workflow.html","id":"search-dictionary","dir":"Articles","previous_headings":"Example 1: institution locations","what":"Search dictionary","title":"Workflow","text":"dictionary output shows two variables, pclatitude latitude. similar descriptions, latitude longer stretch years available. Now ’ll search longitude: Similar output, note longitude represented variable drops final e: longitud. variables.","code":"ipeds_dict(\"latitude\") #>  #> ====================================================================== #> VARIABLE: pclatitude #> ====================================================================== #>  #> ::::::::::::::::::::          DESCRIPTION         :::::::::::::::::::: #>  #> Latitude location of institution #>  #> :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: #>  #> ../FILES  #>  #>  |__ IC2021_CAMPUSES* #>  |__ IC2022_CAMPUSES* #>  |__ IC2023_CAMPUSES* #>  #>  * Denotes a long file in which institutions may have more than one  #>  record (UNITID values repeated across multiple rows). #>  #> ====================================================================== #> VARIABLE: latitude #> ====================================================================== #>  #> ::::::::::::::::::::          DESCRIPTION         :::::::::::::::::::: #>  #> Latitude location of institution #>  #> :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: #>  #> ../FILES  #>  #>  |__ HD2009 #>  |__ HD2010 #>  |__ HD2011 #>  |__ HD2012 #>  |__ HD2013 #>  |__ HD2014 #>  |__ HD2015 #>  |__ HD2016 #>  |__ HD2017 #>  |__ HD2018 #>  |__ HD2019 #>  |__ HD2020 #>  |__ HD2021 #>  |__ HD2022 #>  |__ HD2023 #>  #> ====================================================================== #> Printed information for 2 of out 2 variables. ipeds_dict(\"longitude\") #>  #> ====================================================================== #> VARIABLE: longitud #> ====================================================================== #>  #> ::::::::::::::::::::          DESCRIPTION         :::::::::::::::::::: #>  #> Longitude location of institution #>  #> :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: #>  #> ../FILES  #>  #>  |__ HD2009 #>  |__ HD2010 #>  |__ HD2011 #>  |__ HD2012 #>  |__ HD2013 #>  |__ HD2014 #>  |__ HD2015 #>  |__ HD2016 #>  |__ HD2017 #>  |__ HD2018 #>  |__ HD2019 #>  |__ HD2020 #>  |__ HD2021 #>  |__ HD2022 #>  |__ HD2023 #>  #> ====================================================================== #> VARIABLE: pclongitud #> ====================================================================== #>  #> ::::::::::::::::::::          DESCRIPTION         :::::::::::::::::::: #>  #> Longitude location of institution #>  #> :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: #>  #> ../FILES  #>  #>  |__ IC2021_CAMPUSES* #>  |__ IC2022_CAMPUSES* #>  |__ IC2023_CAMPUSES* #>  #>  * Denotes a long file in which institutions may have more than one  #>  record (UNITID values repeated across multiple rows). #>  #> ====================================================================== #> Printed information for 2 of out 2 variables."},{"path":"https://nehgov.github.io/ripeds/articles/workflow.html","id":"pull-most-recent-year","dir":"Articles","previous_headings":"Example 1: institution locations","what":"Pull most recent year","title":"Workflow","text":"begin, pull recent year, can see output data dictionary ../FILES: 2023. ’ll run default chain add call dplyr::as_tibble() end covert data.frame output tibble nicer viewing: output contains requested variables, plus unique institutional unitid, year associated request.","code":"df <- ipeds_init() |>   ipeds_select(latitude, longitud) |>   ipeds_year(2023) |>    ipeds_get() |>   as_tibble() df #> # A tibble: 6,163 × 4 #>    unitid latitude longitud  year #>     <int>    <dbl>    <dbl> <int> #>  1 100654     34.8    -86.6  2023 #>  2 100663     33.5    -86.8  2023 #>  3 100690     32.4    -86.2  2023 #>  4 100706     34.7    -86.6  2023 #>  5 100724     32.4    -86.3  2023 #>  6 100733     33.2    -87.5  2023 #>  7 100751     33.2    -87.5  2023 #>  8 100760     32.9    -85.9  2023 #>  9 100812     34.8    -87.0  2023 #> 10 100830     32.4    -86.2  2023 #> # ℹ 6,153 more rows"},{"path":"https://nehgov.github.io/ripeds/articles/workflow.html","id":"pull-past-10-years","dir":"Articles","previous_headings":"Example 1: institution locations","what":"Pull past 10 years","title":"Workflow","text":"Modifying request slightly, can request past 10 years data. institutions don’t move, might interesting!","code":"df <- ipeds_init() |>   ipeds_select(latitude, longitud) |>   ipeds_year(2014:2023) |>    ipeds_get() |>   as_tibble() |>   arrange(unitid, year) df #> # A tibble: 68,572 × 4 #>    unitid latitude longitud  year #>     <int>    <dbl>    <dbl> <int> #>  1 100636     32.4    -86.2  2014 #>  2 100654     34.8    -86.6  2014 #>  3 100654     34.8    -86.6  2015 #>  4 100654     34.8    -86.6  2016 #>  5 100654     34.8    -86.6  2017 #>  6 100654     34.8    -86.6  2018 #>  7 100654     34.8    -86.6  2019 #>  8 100654     34.8    -86.6  2020 #>  9 100654     34.8    -86.6  2021 #> 10 100654     34.8    -86.6  2022 #> # ℹ 68,562 more rows"},{"path":"https://nehgov.github.io/ripeds/articles/workflow.html","id":"add-other-useful-variables-as-well-as-a-filter","dir":"Articles","previous_headings":"Example 1: institution locations","what":"Add other useful variables as well as a filter","title":"Workflow","text":"next step, can add variables, including instnm (institution name), sector, gives level (sub two-year, two-year, four-year) control (public, private --profit, private -profit). can also limit institutions Kentucky using filter stabbr == \"KY\". neither additional variables filtering variables come different files already downloaded memory, request faster.","code":"df <- ipeds_init() |>   ipeds_select(instnm, sector, latitude, longitud) |>   ipeds_year(2014:2023) |>   ipeds_filter(stabbr == \"KY\") |>    ipeds_get() |>   as_tibble() df #> # A tibble: 979 × 7 #>    unitid  year instnm                           sector latitude stabbr longitud #>     <int> <int> <chr>                             <int>    <dbl> <chr>     <dbl> #>  1 156189  2023 Alice Lloyd College                   2     37.3 KY        -82.9 #>  2 156213  2023 Asbury University                     2     37.9 KY        -84.7 #>  3 156222  2023 Asbury Theological Seminary           2     37.9 KY        -84.7 #>  4 156231  2023 Ashland Community and Technical…      4     38.5 KY        -82.7 #>  5 156286  2023 Bellarmine University                 2     38.2 KY        -85.7 #>  6 156295  2023 Berea College                         2     37.6 KY        -84.3 #>  7 156310  2023 PJ's College of Cosmetology-Bow…      9     37.0 KY        -86.5 #>  8 156338  2023 Southcentral Kentucky Community…      4     37.0 KY        -86.5 #>  9 156356  2023 Brescia University                    2     37.8 KY        -87.1 #> 10 156365  2023 Campbellsville University             2     37.3 KY        -85.3 #> # ℹ 969 more rows"},{"path":"https://nehgov.github.io/ripeds/articles/workflow.html","id":"example-2-exclusively-distance-undergraduate-students","dir":"Articles","previous_headings":"","what":"Example 2: exclusively distance undergraduate students","title":"Workflow","text":"example, ’ll search number exclusively distance education undergraduate students.","code":""},{"path":"https://nehgov.github.io/ripeds/articles/workflow.html","id":"searching","dir":"Articles","previous_headings":"Example 2: exclusively distance undergraduate students","what":"Searching","title":"Workflow","text":"’ll begin searching “distance”: yields quite results (’re shown 10 70). However, looking list, find efdeexc represents, “Students enrolled exclusively distance education courses” covers 2011 2022. ’ll use variable. Looking output, find issue: unitid values unique row. Instead, unitid multiple values efdeexc. Looking back output ipeds_dict(), can see file values come, EF2022A_DIST, long. means need find variable uniquely identifies values efdeexc. two ways : Search filename ripeds dictionary look list possible variables: ipeds_dict(\"EF2022A_DIST\", search_col = \"filename\",    limit = Inf) Download dictionary file associated complete data file provided IPEDS: ipeds_download_to_disk(\".\", \"EF2022A_DIST\", type = \"dictionary\") advantage first don’t download extra files (unzip either Microsoft Excel workbook HTML file). benefit second IPEDS dictionary contain information presented ipeds_dict().","code":"ipeds_dict(\"distance\") #>  #> ====================================================================== #> VARIABLE: pdocppde #> ====================================================================== #>  #> NOTE: This variable has (2) unique descriptions. #>  #> :::::::::::::::::::         DESCRIPTION (1)        ::::::::::::::::::: #>  #> Doctor's degree-professional practice - all programs in a CIP code #>  can be completed entirely via distance education #>  #> :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: #>  #> ../FILES  #>  #>  |__ C2020DEP* #>  |__ C2021DEP* #>  |__ C2022DEP* #>  |__ C2023DEP* #>  #>  * Denotes a long file in which institutions may have more than one  #>  record (UNITID values repeated across multiple rows). #>  #> :::::::::::::::::::         DESCRIPTION (2)        ::::::::::::::::::: #>  #> Number of Doctor's degree-professional practice programs offered via #>  distance education #>  #> :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: #>  #> ../FILES  #>  #>  |__ C2013DEP* #>  |__ C2014DEP* #>  |__ C2015DEP* #>  |__ C2016DEP* #>  |__ C2017DEP* #>  |__ C2018DEP* #>  |__ C2019DEP* #>  #>  * Denotes a long file in which institutions may have more than one  #>  record (UNITID values repeated across multiple rows). #>  #> ====================================================================== #> VARIABLE: distcrs #> ====================================================================== #>  #> ::::::::::::::::::::          DESCRIPTION         :::::::::::::::::::: #>  #> Distance education courses offered #>  #> :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: #>  #> ../FILES  #>  #>  |__ IC2016 #>  |__ IC2017 #>  |__ IC2018 #>  |__ IC2019 #>  |__ IC2020 #>  |__ IC2021 #>  |__ IC2022 #>  |__ IC2023 #>  #> ====================================================================== #> VARIABLE: slo3 #> ====================================================================== #>  #> ::::::::::::::::::::          DESCRIPTION         :::::::::::::::::::: #>  #> Distance learning opportunities #>  #> :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: #>  #> ../FILES  #>  #>  |__ IC2001 #>  |__ IC2002 #>  |__ IC2003 #>  |__ IC2004 #>  |__ IC2005 #>  |__ IC2006 #>  |__ IC2007 #>  |__ IC2008 #>  |__ IC2009 #>  |__ IC2010 #>  |__ IC2011 #>  #> ====================================================================== #> VARIABLE: pcert2de #> ====================================================================== #>  #> NOTE: This variable has (2) unique descriptions. #>  #> :::::::::::::::::::         DESCRIPTION (1)        ::::::::::::::::::: #>  #> Number of 1-year, but less than 2-year certificate programs offered #>  via distance education #>  #> :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: #>  #> ../FILES  #>  #>  |__ C2013DEP* #>  |__ C2014DEP* #>  |__ C2015DEP* #>  |__ C2016DEP* #>  |__ C2017DEP* #>  |__ C2018DEP* #>  |__ C2019DEP* #>  #>  * Denotes a long file in which institutions may have more than one  #>  record (UNITID values repeated across multiple rows). #>  #> :::::::::::::::::::         DESCRIPTION (2)        ::::::::::::::::::: #>  #> Certificates of 1 year, but less than 2 years - all programs in a CIP #>  code can be completed entirely via distance education #>  #> :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: #>  #> ../FILES  #>  #>  |__ C2020DEP* #>  |__ C2021DEP* #>  |__ C2022DEP* #>  |__ C2023DEP* #>  #>  * Denotes a long file in which institutions may have more than one  #>  record (UNITID values repeated across multiple rows). #>  #> ====================================================================== #> VARIABLE: dstngc #> ====================================================================== #>  #> ::::::::::::::::::::          DESCRIPTION         :::::::::::::::::::: #>  #> Graduate level distance education courses offered #>  #> :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: #>  #> ../FILES  #>  #>  |__ IC2017 #>  |__ IC2018 #>  |__ IC2019 #>  |__ IC2020 #>  |__ IC2021 #>  |__ IC2022 #>  |__ IC2023 #>  #> ====================================================================== #> VARIABLE: pcert1bde #> ====================================================================== #>  #> ::::::::::::::::::::          DESCRIPTION         :::::::::::::::::::: #>  #> Certificates of at least 12 weeks, but less than 1 year - all #>  programs in a CIP code can be completed entirely via distance #>  education #>  #> :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: #>  #> ../FILES  #>  #>  |__ C2020DEP* #>  |__ C2021DEP* #>  |__ C2022DEP* #>  |__ C2023DEP* #>  #>  * Denotes a long file in which institutions may have more than one  #>  record (UNITID values repeated across multiple rows). #>  #> ====================================================================== #> VARIABLE: pbachlde #> ====================================================================== #>  #> NOTE: This variable has (2) unique descriptions. #>  #> :::::::::::::::::::         DESCRIPTION (1)        ::::::::::::::::::: #>  #> Number of Bachelor's degree programs offered via distance education #>  #> :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: #>  #> ../FILES  #>  #>  |__ C2013DEP* #>  |__ C2014DEP* #>  |__ C2015DEP* #>  |__ C2016DEP* #>  |__ C2017DEP* #>  |__ C2018DEP* #>  |__ C2019DEP* #>  #>  * Denotes a long file in which institutions may have more than one  #>  record (UNITID values repeated across multiple rows). #>  #> :::::::::::::::::::         DESCRIPTION (2)        ::::::::::::::::::: #>  #> Bachelor's degree - all programs in a CIP code can be completed #>  entirely via distance education #>  #> :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: #>  #> ../FILES  #>  #>  |__ C2020DEP* #>  |__ C2021DEP* #>  |__ C2022DEP* #>  |__ C2023DEP* #>  #>  * Denotes a long file in which institutions may have more than one  #>  record (UNITID values repeated across multiple rows). #>  #> ====================================================================== #> VARIABLE: pdocrsdes #> ====================================================================== #>  #> ::::::::::::::::::::          DESCRIPTION         :::::::::::::::::::: #>  #> Doctor's degree-research/scholarship - some programs in a CIP code #>  can be completed entirely via distance education #>  #> :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: #>  #> ../FILES  #>  #>  |__ C2020DEP* #>  |__ C2021DEP* #>  |__ C2022DEP* #>  |__ C2023DEP* #>  #>  * Denotes a long file in which institutions may have more than one  #>  record (UNITID values repeated across multiple rows). #>  #> ====================================================================== #> VARIABLE: pctdesom #> ====================================================================== #>  #> ::::::::::::::::::::          DESCRIPTION         :::::::::::::::::::: #>  #> Percent of students enrolled in some but not all distance education #>  courses #>  #> :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: #>  #> ../FILES  #>  #>  |__ DRVEF2021 #>  |__ DRVEF2022 #>  |__ DRVEF2023 #>  #> ====================================================================== #> VARIABLE: pcgdesom #> ====================================================================== #>  #> ::::::::::::::::::::          DESCRIPTION         :::::::::::::::::::: #>  #> Percent of graduate students enrolled in some but not all distance #>  education courses #>  #> :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: #>  #> ../FILES  #>  #>  |__ DRVEF2021 #>  |__ DRVEF2022 #>  |__ DRVEF2023 #>  #> ====================================================================== #> Printed information for 10 of out 70 variables. #> Increase limit to see more variables. df <- ipeds_init() |>   ipeds_select(efdeexc) |>   ipeds_year(2022) |>    ipeds_get() |>   as_tibble() df #> # A tibble: 22,247 × 3 #>    unitid efdeexc  year #>     <int>   <int> <int> #>  1 100654     429  2022 #>  2 100654     249  2022 #>  3 100654     246  2022 #>  4 100654       3  2022 #>  5 100654     180  2022 #>  6 100663    5984  2022 #>  7 100663    2436  2022 #>  8 100663    2316  2022 #>  9 100663     120  2022 #> 10 100663    3548  2022 #> # ℹ 22,237 more rows"},{"path":"https://nehgov.github.io/ripeds/articles/workflow.html","id":"check-complete-file-dictionary-file-and-filter","dir":"Articles","previous_headings":"Example 2: exclusively distance undergraduate students","what":"Check complete file dictionary file and filter","title":"Workflow","text":"example, ’ll download IPEDS dictionary file. Looking Frequencies tab unzipped file, can see efdelev values map different student levels combination levels. select undergraduates, need set efdelev == 2. Note ripeds converts input lowercase, choosing either EFDELEV efdelev work. Adding filter, successfully return number exclusively distance education undergraduate students 2022.","code":"ipeds_download_to_disk(\".\", \"EF2022A_DIST\", type = \"dictionary\") df <- ipeds_init() |>   ipeds_select(efdeexc) |>   ipeds_filter(efdelev == 2) |>    ipeds_year(2022) |>    ipeds_get() |>   as_tibble() df #> # A tibble: 5,706 × 5 #>    unitid  year efdeexc efdelev file         #>     <int> <int>   <int>   <int> <chr>        #>  1 100654  2022     249       2 EF2022A_DIST #>  2 100663  2022    2436       2 EF2022A_DIST #>  3 100690  2022     228       2 EF2022A_DIST #>  4 100706  2022     481       2 EF2022A_DIST #>  5 100724  2022     133       2 EF2022A_DIST #>  6 100751  2022    3306       2 EF2022A_DIST #>  7 100760  2022     392       2 EF2022A_DIST #>  8 100812  2022    1460       2 EF2022A_DIST #>  9 100830  2022     582       2 EF2022A_DIST #> 10 100858  2022    1094       2 EF2022A_DIST #> # ℹ 5,696 more rows"},{"path":"https://nehgov.github.io/ripeds/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Benjamin Skinner. Author, maintainer.","code":""},{"path":"https://nehgov.github.io/ripeds/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Skinner B (2025). ripeds: Download Manipulate Integrated Postsecondary Education Data System (IPEDS) Data. R package version 0.2.0, https://potential-adventure-6knn6m6.pages.github.io/.","code":"@Manual{,   title = {ripeds: Download and Manipulate Integrated Postsecondary Education Data System (IPEDS) Data},   author = {Benjamin Skinner},   year = {2025},   note = {R package version 0.2.0},   url = {https://potential-adventure-6knn6m6.pages.github.io/}, }"},{"path":"https://nehgov.github.io/ripeds/index.html","id":"download-and-manipulate-integrated-postsecondary-education-data-system-ipeds-data","dir":"","previous_headings":"","what":"Download and Manipulate Integrated Postsecondary Education Data System (IPEDS) Data","title":"Download and Manipulate Integrated Postsecondary Education Data System (IPEDS) Data","text":"SOFTWARE PACKAGE BETA RELEASE MAY CONTAIN BUGS. ADDITION, FUNCTIONALITY MAY CHANGE. PLEASE SEE DISCLAIMER USE ACCORDINGLY. ripeds R package provides series piped functions facilitate downloading Department Education Integrated Postsecondary Education Data System (IPEDS) complete data files. command pipes must start ipeds_init(), end ipeds_get(), linked base pipe, |>, magrittr pipe function, %>%. Internal commands, ipeds_select(), ipeds_filter(), ipeds_year() come order pipe chain. ipeds_select() required.","code":""},{"path":"https://nehgov.github.io/ripeds/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Download and Manipulate Integrated Postsecondary Education Data System (IPEDS) Data","text":"","code":"devtools::install_github(\"nehgov/ripeds\")"},{"path":"https://nehgov.github.io/ripeds/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Download and Manipulate Integrated Postsecondary Education Data System (IPEDS) Data","text":"","code":"## perform data pull df <- ipeds_init() |>   ipeds_select(instnm, pt_ug) |>   ipeds_filter(stabbr == \"KY\") |>   ipeds_year(2020:2021) |>   ipeds_get()  ## show df |> head()  ##   unitid year                      instnm stabbr pt_ug ## 1 156189 2020         Alice Lloyd College     KY     1 ## 2 156189 2021         Alice Lloyd College     KY     1 ## 3 156213 2020           Asbury University     KY     1 ## 4 156213 2021           Asbury University     KY     1 ## 5 156222 2020 Asbury Theological Seminary     KY     2 ## 6 156222 2021 Asbury Theological Seminary     KY     2"},{"path":"https://nehgov.github.io/ripeds/index.html","id":"help-and-vignettes","dir":"","previous_headings":"","what":"Help and vignettes","title":"Download and Manipulate Integrated Postsecondary Education Data System (IPEDS) Data","text":"See ripeds site help well vignettes explaining package functionality.","code":""},{"path":"https://nehgov.github.io/ripeds/index.html","id":"disclaimer","dir":"","previous_headings":"","what":"Disclaimer","title":"Download and Manipulate Integrated Postsecondary Education Data System (IPEDS) Data","text":"software package licensed CC0 license. provided “” without warranty kind, either expressed, implied, statutory, including, limited , warranty subject software conform specifications, implied warranties merchantability, fitness particular purpose, freedom infringement, warranty subject software error free, warranty documentation, provided, conform subject software. agreement , manner, constitute endorsement NEH prior recipient results, resulting designs, hardware, software products applications resulting use subject software. , NEH disclaims warranties liabilities regarding third-party software, present original software, distributes “.” recipient agrees waive claims United States government, contractors subcontractors, well prior recipient. recipient’s use subject software results liabilities, demands, damages, expenses losses arising use, including damages products based , resulting , recipient’s use subject software, recipient shall indemnify hold harmless United States government, contractors subcontractors, well prior recipient, extent permitted law. Recipient’s sole remedy matter shall immediate, unilateral termination agreement.","code":""},{"path":"https://nehgov.github.io/ripeds/reference/ipeds_dict.html","id":null,"dir":"Reference","previous_headings":"","what":"Search data dictionary. — ipeds_dict","title":"Search data dictionary. — ipeds_dict","text":"function used search IPEDS data dictionary.","code":""},{"path":"https://nehgov.github.io/ripeds/reference/ipeds_dict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search data dictionary. — ipeds_dict","text":"","code":"ipeds_dict(   search_string,   search_col = c(\"all\", \"description\", \"varname\", \"filename\"),   exact_match = FALSE,   limit = 10,   confirm = FALSE,   return_dict = FALSE,   print_off = FALSE )"},{"path":"https://nehgov.github.io/ripeds/reference/ipeds_dict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search data dictionary. — ipeds_dict","text":"search_string Character string search. Can use regular expression search. Must escape special characters, . \\ | ( ) [ { ^ $ * +   ?, doublebackslash \\\\. search_col Column search. default search columns. options include: \"varname\", \"description\", \"filename\". exact_match Set TRUE want exact search string matches. Note setting exact_match TRUE may work expected search string includes regular expressions. limit first 10 dictionary items returned default. Increase return values. Set Inf return items matched search' confirm Use confirm status variable name dictionary. Returns TRUE FALSE. return_dict Return tibble subset data dictionary. print_off print console; useful want return tibble dictionary values.","code":""},{"path":"https://nehgov.github.io/ripeds/reference/ipeds_dict.html","id":"interactive-dictionary","dir":"Reference","previous_headings":"","what":"Interactive dictionary","title":"Search data dictionary. — ipeds_dict","text":"using ipeds_dict() interactively (default), formatted output returned console.   Output includes: Variable name unique description found across dictionary files provided NCES complete data files variable description found flag (*) necessary denote data file long file note indicate results available limit available","code":"> ipeds_dict(\"efydesom\")  ===================================================================== VARIABLE: efydesom =====================================================================  :::::::::::::::::::          DESCRIPTION          :::::::::::::::::::  Students enrolled in some but not all distance education courses  :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::  ../FILES   |__ EFFY2020_DIST*  |__ EFFY2021_DIST*  |__ EFFY2022_DIST*  |__ EFFY2023_DIST*   * Denotes a long file in which institutions may have more than one  record (UNITID values repeated across multiple rows).  ===================================================================== Printed information for 1 of out 1 variables."},{"path":"https://nehgov.github.io/ripeds/reference/ipeds_dict.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search data dictionary. — ipeds_dict","text":"","code":"if (FALSE) { # \\dontrun{ ## simple search for \"state\" in any part of the dictionary ipeds_dict(\"state\")  ## variable names starting with \"st\" ipeds_dict(\"^st\", search_col = \"varname\")  ## return full dictionary (only recommended if not printing and ## storing in object) df <- ipeds_dict(\".\", limit = Inf, print_off = TRUE, return_dict = TRUE) } # }"},{"path":"https://nehgov.github.io/ripeds/reference/ipeds_download_to_disk.html","id":null,"dir":"Reference","previous_headings":"","what":"Download IPEDS files directly to disk — ipeds_download_to_disk","title":"Download IPEDS files directly to disk — ipeds_download_to_disk","text":"Directly download save IPEDS zip files disk future usage. default, function create subdirectories necessary save files.","code":""},{"path":"https://nehgov.github.io/ripeds/reference/ipeds_download_to_disk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download IPEDS files directly to disk — ipeds_download_to_disk","text":"","code":"ipeds_download_to_disk(   to_dir,   files = NULL,   use_ipeds_dict = NULL,   type = c(\"data\", \"dictionary\"),   overwrite = FALSE,   create_dir = TRUE,   quiet = FALSE )"},{"path":"https://nehgov.github.io/ripeds/reference/ipeds_download_to_disk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download IPEDS files directly to disk — ipeds_download_to_disk","text":"to_dir Directory path saving zip files (created exist unless create_dir set FALSE). files Vector survey file names without ending download (e.g., HD2023). use_ipeds_dict Output ipeds_dict() return_dict = TRUE; argument missing, chosen input files argument also included. type Download data file (default) associated dictionary file. overwrite Overwrite files local directory temporary directory. Default FALSE (keep already existing files). create_dir Recursively create directory path specified user exist. Default TRUE. quiet show progress messages. Default FALSE.","code":""},{"path":"https://nehgov.github.io/ripeds/reference/ipeds_download_to_disk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download IPEDS files directly to disk — ipeds_download_to_disk","text":"","code":"if (FALSE) { # \\dontrun{ ipeds_download_to_disk(\".\", c(\"HD2020\", \"HD2021\")) ipeds_download_to_disk(\".\", c(\"HD2020\", \"HD2021\"), overwrite = TRUE)  files <- c(\"HD2020\", \"HD2021\") ipeds_download_to_disk(\".\", files)  # using return from ipeds_file_table() to download all 2020 files dict <- ipeds_file_table() ipeds_download_to_disk(\".\", use_ipeds_dict = dict[dict$year == 2020,])  # download associated dictionary files ipeds_download_to_disk(\".\", c(\"HD2020\", \"HD2021\"), type = \"dictionary\") } # }"},{"path":"https://nehgov.github.io/ripeds/reference/ipeds_file_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a table of all currently available complete data files — ipeds_file_table","title":"Return a table of all currently available complete data files — ipeds_file_table","text":"Return table currently available IPEDS complete data files (see https://nces.ed.gov/ipeds/datacenter/DataFiles.aspx). Unless called user , first ipeds_init() call session call ipeds_file_table() scrape table NCES website store results temporary directory. Subsequent data requests session return table memory unless user calls requests redownload table.","code":""},{"path":"https://nehgov.github.io/ripeds/reference/ipeds_file_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a table of all currently available complete data files — ipeds_file_table","text":"","code":"ipeds_file_table(redownload = FALSE, return_table = TRUE)"},{"path":"https://nehgov.github.io/ripeds/reference/ipeds_file_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return a table of all currently available complete data files — ipeds_file_table","text":"redownload Re-scrape NCES website generate table files. Defaults FALSE. return_table Return table (Default = TRUE).","code":""},{"path":"https://nehgov.github.io/ripeds/reference/ipeds_file_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return a table of all currently available complete data files — ipeds_file_table","text":"data frame following columns: year: Survey year assigned file NCES survey: Survey file category title: Survey file title file: Survey file name","code":""},{"path":"https://nehgov.github.io/ripeds/reference/ipeds_file_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return a table of all currently available complete data files — ipeds_file_table","text":"","code":"if (FALSE) { # \\dontrun{ # First call in a session will scrape NCES website and return ipeds_file_table()  # Second call in the session will return table in memory ipeds_file_table()  # Will re-scrape NCES website ipeds_file_table(redownload = TRUE) } # }"},{"path":"https://nehgov.github.io/ripeds/reference/ipeds_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter IPEDS data by variable values. — ipeds_filter","title":"Filter IPEDS data by variable values. — ipeds_filter","text":"Filter downloaded IPEDS data. Simple filters separated commas treated separated & () boolean. complex multi-part filters, using | () boolean, must input string via object stores string filter.","code":""},{"path":"https://nehgov.github.io/ripeds/reference/ipeds_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter IPEDS data by variable values. — ipeds_filter","text":"","code":"ipeds_filter(ipedscall, ...)"},{"path":"https://nehgov.github.io/ripeds/reference/ipeds_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter IPEDS data by variable values. — ipeds_filter","text":"ipedscall Current list parameters carried forward prior functions chain (ignore) ... Expressions evaluate","code":""},{"path":"https://nehgov.github.io/ripeds/reference/ipeds_filter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter IPEDS data by variable values. — ipeds_filter","text":"Non-standard evaluation may used simple filters ipeds_init(use_nse = TRUE). cases, string filter must used.","code":""},{"path":"https://nehgov.github.io/ripeds/reference/ipeds_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter IPEDS data by variable values. — ipeds_filter","text":"","code":"if (FALSE) { # \\dontrun{ # using non-standard evaluation, you can separate filters by a comma, which # will serve as an (AND) boolean ipeds_filter(stabbr == \"KY\", control < 3) ipeds_filter(stabbr %in% c(\"KY\",\"TN\")) ipeds_filter(grepl(\"community\", instnm))  # more complex filters, such as those using an | (OR) operator, should be # input as a string, either directly or as stored in an object ipeds_filter(\"stabbr == 'KY' | stabbr == 'TN'\")  filter_str <- \"stabbr == 'KY' | stabbr == 'TN'\" ipeds_filter(filter_str) } # }"},{"path":"https://nehgov.github.io/ripeds/reference/ipeds_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Get IPEDS data. — ipeds_get","title":"Get IPEDS data. — ipeds_get","text":"Retrieve IPEDS data establishing data files required filtering (included) required selected variables.","code":""},{"path":"https://nehgov.github.io/ripeds/reference/ipeds_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get IPEDS data. — ipeds_get","text":"","code":"ipeds_get(ipedscall, bind = TRUE, join = TRUE)"},{"path":"https://nehgov.github.io/ripeds/reference/ipeds_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get IPEDS data. — ipeds_get","text":"ipedscall Current list parameters carried forward prior functions chain (ignore) bind Row bind name survey files (e.g., HD2022 HD2023) join Join different name survey files UNITID year. bind = FALSE, join set FALSE function argument ignored.","code":""},{"path":"https://nehgov.github.io/ripeds/reference/ipeds_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get IPEDS data. — ipeds_get","text":"Depending argument combination, chain return one following objects: bind = FALSE, join = FALSE: list files processing (unique complete data file required returned list item). bind = TRUE, join = FALSE: list files like files (e.g., HD*, IC*) row bound together unjoined unlike files bind = TRUE, join = TRUE: data frame like files bound joined","code":""},{"path":"https://nehgov.github.io/ripeds/reference/ipeds_get.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get IPEDS data. — ipeds_get","text":"Notes filters: Filters attempted depending user selects return data. default (join = TRUE), complete filter applied final joined data set. user chooses bind like files (join = FALSE) return files separately (bind = FALSE), attempts made apply filter files apply. may impossible filter complex, requiring consideration variables across multiple files user chose join. Users receive warning message situation return unfiltered data files. situation filter applies one type data file works, also removes missing (NA) values, data files nominally unaffected filter may also rows removed institution completely missing data filtered file. complicated data call (many selected variables, many selected years, complex filter), longer data request may take, particularly downloading files, greater likelihood unexpected behavior join. Users may wish break large complex requests multiple smaller requests elect return list unbound / unjoined data frames can manipulate directly.","code":""},{"path":"https://nehgov.github.io/ripeds/reference/ipeds_get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get IPEDS data. — ipeds_get","text":"","code":"if (FALSE) { # \\dontrun{ # default: bind = TRUE, join = TRUE ipeds_get()  # bind only ipeds_get(join = FALSE)  # non-bind, non-join ipeds_get(bind = FALSE, join = FALSE) ipeds_get(bind = FALSE) # join will be set to FALSE by default } # }"},{"path":"https://nehgov.github.io/ripeds/reference/ipeds_init.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize chained request. — ipeds_init","title":"Initialize chained request. — ipeds_init","text":"Initialize data request. always first series piped functions.","code":""},{"path":"https://nehgov.github.io/ripeds/reference/ipeds_init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize chained request. — ipeds_init","text":"","code":"ipeds_init(local_dir = NA, use_revised_files = TRUE, use_nse = TRUE)"},{"path":"https://nehgov.github.io/ripeds/reference/ipeds_init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize chained request. — ipeds_init","text":"local_dir Local directory check complete IPEDS zip files already downloaded. Newly downloaded files placed well. unset, files stored tempdir(). use_revised_files IPEDS zip files contain revised data, use revised files. Default TRUE. use_nse Use non-standard evaluation chain. Default TRUE.","code":""},{"path":"https://nehgov.github.io/ripeds/reference/ipeds_init.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize chained request. — ipeds_init","text":"","code":"if (FALSE) { # \\dontrun{ ipeds_init()  # set local directory to search first for existing IPEDS data files and in # which to save any that must be downloaded ipeds_init(local_dir = \".\")  # use original files even if revise files exist ipeds_init(use_revised_files = FALSE)  # use standard evaluation throughout the ipeds_*() chain ipeds_init(use_nse = FALSE) } # }"},{"path":"https://nehgov.github.io/ripeds/reference/ipeds_select.html","id":null,"dir":"Reference","previous_headings":"","what":"Select IPEDS data variables. — ipeds_select","title":"Select IPEDS data variables. — ipeds_select","text":"Select variables returned final dataset. default, non-standard evaluation assumed, meaning can input variable names without quotation, separated commas. use_nse = FALSE set ipeds_init(), must use standard evaluation, e.g., string variable names external object contains string variable names.","code":""},{"path":"https://nehgov.github.io/ripeds/reference/ipeds_select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select IPEDS data variables. — ipeds_select","text":"","code":"ipeds_select(ipedscall, ...)"},{"path":"https://nehgov.github.io/ripeds/reference/ipeds_select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select IPEDS data variables. — ipeds_select","text":"ipedscall Current list parameters carried forward prior functions chain (ignore) ... Desired variable names separated commas (case sensitive)","code":""},{"path":"https://nehgov.github.io/ripeds/reference/ipeds_select.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select IPEDS data variables. — ipeds_select","text":"ipeds_select() required part ipeds_*() chain.","code":""},{"path":"https://nehgov.github.io/ripeds/reference/ipeds_select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select IPEDS data variables. — ipeds_select","text":"","code":"if (FALSE) { # \\dontrun{ # with non-standard evalution ipeds_select(UNITID) ipeds_select(UNITID, INSTNM) ipeds_select(unitid, instnm)  # with standard evaluation: ipeds_init(use_nse = FALSE) ipeds_select(\"UNITID\") ipeds_select(\"unitid\", \"instnm\") ipeds_select(c(\"unitid\", \"instnm\"))  vars <- c(\"unitid\", \"instnm\") ipeds_select(vars) } # }"},{"path":"https://nehgov.github.io/ripeds/reference/ipeds_temp_to_disk.html","id":null,"dir":"Reference","previous_headings":"","what":"Save downloaded IPEDS files in temporary directory to disk — ipeds_temp_to_disk","title":"Save downloaded IPEDS files in temporary directory to disk — ipeds_temp_to_disk","text":"Save IPEDS data files (zip) stored temporary directory disk future use. default, function saves copy files local directory leaving copy temporary directory. addition function create subdirectories necessary save files.","code":""},{"path":"https://nehgov.github.io/ripeds/reference/ipeds_temp_to_disk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save downloaded IPEDS files in temporary directory to disk — ipeds_temp_to_disk","text":"","code":"ipeds_temp_to_disk(   to_dir,   overwrite = FALSE,   remove_from_tempdir = FALSE,   create_dir = TRUE )"},{"path":"https://nehgov.github.io/ripeds/reference/ipeds_temp_to_disk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save downloaded IPEDS files in temporary directory to disk — ipeds_temp_to_disk","text":"to_dir Directory path saving zip files (created exist unless create_dir set FALSE). overwrite Overwrite files local directory temporary directory. remove_from_tempdir Remove files temporary directory saving local directory (otherwise removed end R session default). Default FALSE. create_dir Recursively create directory path specified user exist. Default TRUE.","code":""},{"path":"https://nehgov.github.io/ripeds/reference/ipeds_temp_to_disk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save downloaded IPEDS files in temporary directory to disk — ipeds_temp_to_disk","text":"","code":"if (FALSE) { # \\dontrun{ # save any files in tempdir() that match names from ipeds_file_table() to # local directory, preferring local copies, or, if missing, creating # directory if necessary; files will be left in tempdir() until session is closed ipeds_temp_to_disk(local_dir = \".\")  # will error if directory does not exist ipeds_temp_to_disk(local_dir = file.path(\".\", \"data\"), create_dir = FALSE)  # overwrite local versions of files if they exist ipeds_temp_to_disk(local_dir = \".\", overwrite = TRUE)  # remove saved files from tempdir() after copy ipeds_temp_to_disk(local_dir = \".\", remove_from_tempdir = TRUE) } # }"},{"path":"https://nehgov.github.io/ripeds/reference/ipeds_year.html","id":null,"dir":"Reference","previous_headings":"","what":"Select scorecard data year. — ipeds_year","title":"Select scorecard data year. — ipeds_year","text":"function used select year data.","code":""},{"path":"https://nehgov.github.io/ripeds/reference/ipeds_year.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select scorecard data year. — ipeds_year","text":"","code":"ipeds_year(ipedscall, year)"},{"path":"https://nehgov.github.io/ripeds/reference/ipeds_year.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select scorecard data year. — ipeds_year","text":"ipedscall Current list parameters carried forward prior functions chain (ignore) year Four-digit year numeric vector years.","code":""},{"path":"https://nehgov.github.io/ripeds/reference/ipeds_year.html","id":"important-notes","dir":"Reference","previous_headings":"","what":"Important notes","title":"Select scorecard data year. — ipeds_year","text":"variables year option. year selected necessarily year data produced. may year data collected. data collected split years (fall spring), likely year represents fall data (e.g., 2011 2011/2012 data).","code":""},{"path":"https://nehgov.github.io/ripeds/reference/ipeds_year.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select scorecard data year. — ipeds_year","text":"","code":"if (FALSE) { # \\dontrun{ ipeds_year(2012) ipeds_year(c(2010, 2012, 2014)) ipeds_year(2010:2013) } # }"},{"path":"https://nehgov.github.io/ripeds/reference/ripeds.html","id":null,"dir":"Reference","previous_headings":"","what":"Download and Manipulate Integrated Postsecondary Education Data System (IPEDS) Data — ripeds","title":"Download and Manipulate Integrated Postsecondary Education Data System (IPEDS) Data — ripeds","text":"Download manipulate Integrated Postsecondary Education Data System (IPEDS) complete data files using series piped functions.","code":""},{"path":"https://nehgov.github.io/ripeds/reference/ripeds.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download and Manipulate Integrated Postsecondary Education Data System (IPEDS) Data — ripeds","text":"ripeds R package provides series piped functions facilitate downloading Department Education Integrated Postsecondary Education Data System (IPEDS) complete data files. Use ipeds_dict() help find variable names available years. Next perform data pull using chain piped commands. command pipes must start ipeds_init(), end ipeds_get(), linked base pipe, |>, magrittr pipe function, %>%. Internal commands, ipeds_select(), ipeds_filter(), ipeds_year() come order pipe chain. ipeds_select() required addition ipeds_init() ipeds_get().","code":""},{"path":[]},{"path":"https://nehgov.github.io/ripeds/reference/ripeds.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Download and Manipulate Integrated Postsecondary Education Data System (IPEDS) Data — ripeds","text":"Maintainer: Benjamin Skinner bskinner@neh.gov (ORCID)","code":""},{"path":"https://nehgov.github.io/ripeds/news/index.html","id":"ripeds-020","dir":"Changelog","previous_headings":"","what":"ripeds 0.2.0","title":"ripeds 0.2.0","text":"Public beta release Updates dictionary 4 March 2025 Small changes dictionary Added messaging downloading quiet option","code":""},{"path":"https://nehgov.github.io/ripeds/news/index.html","id":"ripeds-012","dir":"Changelog","previous_headings":"","what":"ripeds 0.1.2","title":"ripeds 0.1.2","text":"Initial beta version","code":""}]
